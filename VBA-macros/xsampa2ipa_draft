REM  La macro scanne le texte sélectionné - qui est stocké dans la variable "xsampa_str"
REM  Elle remplace toutes les occurrences de la première chaîne par le caractère unicode prévu
REM  prévu et stocke le résultat dans la variable "step_1"
REM  Elle remplace les occurrences d'une expression à la fois et stocke le résultat
REM  dans une variable nommée "step_#+1" (cad step_2, step_3, etc.)
REM  Quand la dernière expression a été remplacée, la macro stocke le résultat dans
REM  la variable "ipa_str"
REM  Elle insère le contenu de "ipa_str" à l'emplacement du curseur et supprime
REM  le texte (initialement) sélectionné (cad le contenu de "xsampa_str")

REM  La macro utilise les codes décimaux des caractères unicode.
REM  S'il vous plaît, veuillez rapporter tout bug ou erreur à l'adresse :
REM  josueakpoue@gmail.com

REM _H_T, _B_L, _R_F n'ont pas d'équivalent unicode


step_1 = Replace (xsampa_str, "_" & Chr(34), Chr(776), 1, -1, False)
step_2 = Replace (step_1, "d`", Chr(599), 1, -1, False)
step_3 = Replace (step_2, "J\", Chr(607), 1, -1, False)
step_4 = Replace (step_3, "X\", Chr(615), 1, -1, False)
step_5 = Replace (step_4, "G\", Chr(610), 1, -1, False)
step_6 = Replace (step_5, "l\", Chr(634), 1, -1, False)
step_7 = Replace (step_6, "z\", Chr(657), 1, -1, False)
step_8 = Replace (step_7, "n`", Chr(627), 1, -1, False)
step_9 = Replace (step_8, "s\", Chr(597), 1, -1, False)
step_10 = Replace (step_9, ">\", Chr(674), 1, -1, False)
step_11 = Replace (step_10, "N\", Chr(628), 1, -1, False)
step_12 = Replace (step_11, "B\", Chr(665), 1, -1, False)
step_13 = Replace (step_12, "R\", Chr(640), 1, -1, False)
step_14 = Replace (step_13, "<\", Chr(673), 1, -1, False)
step_15 = Replace (step_14, "r`", Chr(638), 1, -1, False)
step_16 = Replace (step_15, "p\", Chr(632), 1, -1, False)
step_17 = Replace (step_16, "H\", Chr(668), 1, -1, False)
step_18 = Replace (step_17, "_q", Chr(793), 1, -1, False)
step_19 = Replace (step_18, "@`", Chr(602), 1, -1, False)
step_20 = Replace (step_19, "_A", Chr(792), 1, -1, False)
step_21 = Replace (step_20, "_^", Chr(815), 1, -1, False)
step_22 = Replace (step_21, "s`", Chr(242), 1, -1, False)
step_23 = Replace (step_22, "z`", Chr(256), 1, -1, False)
step_24 = Replace (step_23, "_o", Chr(798), 1, -1, False)
step_25 = Replace (step_24, "j\", Chr(269), 1, -1, False)
step_26 = Replace (step_25, "_r", Chr(797), 1, -1, False)
step_27 = Replace (step_26, "_x", Chr(829), 1, -1, False)
step_28 = Replace (step_27, "_e", Chr(820), 1, -1, False)
step_29 = Replace (step_28, "X\", Chr(295), 1, -1, False)
step_30 = Replace (step_29, "?\", Chr(661), 1, -1, False)
step_31 = Replace (step_30, "h\", Chr(641), 1, -1, False)
step_32 = Replace (step_31, "_}", Chr(794), 1, -1, False)
step_33 = Replace (step_32, "K\", Chr(622), 1, -1, False)
step_34 = Replace (step_33, "_?\", Chr(740), 1, -1, False)
step_35 = Replace (step_34, "v\", Chr(651), 1, -1, False)
step_36 = Replace (step_35, "r\`", Chr(635), 1, -1, False)
step_37 = Replace (step_36, "r\", Chr(633), 1, -1, False)
step_38 = Replace (step_37, "M\", Chr(624), 1, -1, False)
step_39 = Replace (step_38, "l`", Chr(621), 1, -1, False)
step_40 = Replace (step_39, "_-", Chr(800), 1, -1, False)
step_41 = Replace (step_40, "L\", Chr(671), 1, -1, False)
step_42 = Replace (step_41, "O\", Chr(664), 1, -1, False)
step_43 = Replace (step_42, "|\|\", Chr(449), 1, -1, False)
step_44 = Replace (step_43, "!\", Chr(451), 1, -1, False)
step_45 = Replace (step_44, "=\", Chr(450), 1, -1, False)
step_46 = Replace (step_45, "|\", Chr(448), 1, -1, False)
step_47 = Replace (step_46, "b_<", Chr(595), 1, -1, False)
step_48 = Replace (step_47, "d_<", Chr(599), 1, -1, False)
step_49 = Replace (step_48, "J\_<", Chr(644), 1, -1, False)
step_50 = Replace (step_49, "g_<", Chr(608), 1, -1, False)
step_51 = Replace (step_50, "G\_<", Chr(667), 1, -1, False)
step_52 = Replace (step_51, "p_>", "p" & Chr(700), 1, -1, False)
step_53 = Replace (step_52, "t_>", "t" & Chr(700), 1, -1, False)
step_54 = Replace (step_53, "k_>", "k" & Chr(700), 1, -1, False)
step_55 = Replace (step_54, "s_>", "s" & Chr(700), 1, -1, False)
step_56 = Replace (step_55, "_=", Chr(809), 1, -1, False)
step_57 = Replace (step_56, "_l", Chr(737), 1, -1, False)
step_58 = Replace (step_57, "_G", Chr(736), 1, -1, False)
step_59 = Replace (step_58, "_+", Chr(799), 1, -1, False)
step_60 = Replace (step_59, "_n", Chr(8319), 1, -1, False)
step_61 = Replace (step_60, "_j", Chr(690), 1, -1, False)
step_62 = Replace (step_61, "_c", Chr(796), 1, -1, False)
step_63 = Replace (step_62, "~", Chr(771), 1, -1, False)
step_64 = Replace (step_63, "_~", Chr(771), 1, -1, False)
step_65 = Replace (step_64, "@\", Chr(600), 1, -1, False)
step_66 = Replace (step_65, "_w", Chr(695), 1, -1, False)
step_67 = Replace (step_66, "_O", Chr(825), 1, -1, False)
step_68 = Replace (step_67, "_m", Chr(827), 1, -1, False)
step_69 = Replace (step_68, "3\", Chr(606), 1, -1, False)
step_70 = Replace (step_69, "_N", Chr(828), 1, -1, False)
step_71 = Replace (step_70, "_h", Chr(688), 1, -1, False)
step_72 = Replace (step_71, "_a", Chr(826), 1, -1, False)
step_73 = Replace (step_72, "_k", Chr(816), 1, -1, False)
step_74 = Replace (step_73, "_v", Chr(812), 1, -1, False)
step_75 = Replace (step_74, "_d", Chr(810), 1, -1, False)
step_76 = Replace (step_75, "_t", Chr(804), 1, -1, False)
step_77 = Replace (step_76, "_0", Chr(805), 1, -1, False)
step_78 = Replace (step_77, "<F>", Chr(8600), 1, -1, False)
step_79 = Replace (step_78, "<R>", Chr(8599), 1, -1, False)
step_80 = Replace (step_79, "_F", Chr(770), 1, -1, False)
step_81 = Replace (step_80, ":\", Chr(721), 1, -1, False)
step_82 = Replace (step_81, "_X", Chr(724), 1, -1, False)
step_83 = Replace (step_82, "_R", Chr(780), 1, -1, False)
step_84 = Replace (step_83, "||", Chr(449), 1, -1, False)
step_85 = Replace (step_84, "-\", Chr(860), 1, -1, False)
step_86 = Replace (step_85, "_T", Chr(779), 1, -1, False)
step_87 = Replace (step_86, "_T", Chr(741), 1, -1, False)
step_88 = Replace (step_87, "_H", Chr(769), 1, -1, False)
step_89 = Replace (step_88, "_H", Chr(742), 1, -1, False)
step_90 = Replace (step_89, "_M", Chr(772), 1, -1, False)
step_91 = Replace (step_90, "_M", Chr(743), 1, -1, False)
step_92 = Replace (step_91, "_L", Chr(768), 1, -1, False)
step_93 = Replace (step_92, "_L", Chr(744), 1, -1, False)
step_94 = Replace (step_93, "_B", Chr(783), 1, -1, False)
step_95 = Replace (step_94, "_B", Chr(745), 1, -1, False)
step_96 = Replace (step_95, "}", Chr(649), 1, -1, False)
step_97 = Replace (step_96, "H", Chr(613), 1, -1, False)
step_98 = Replace (step_97, "W", Chr(653), 1, -1, False)
step_99 = Replace (step_98, "`", Chr(734), 1, -1, False)
step_100 = Replace (step_99, "=", Chr(809), 1, -1, False)
step_101 = Replace (step_100, "5", Chr(619), 1, -1, False)
step_102 = Replace (step_101, Chr(39), Chr(690), 1, -1, False)
step_103 = Replace (step_102, "^", Chr(8593), 1, -1, False)
step_104 = Replace (step_103, "!", Chr(8595), 1, -1, False)
step_105 = Replace (step_104, "|", Chr(448), 1, -1, False)
step_106 = Replace (step_105, ":", Chr(720), 1, -1, False)
step_107 = Replace (step_106, "%", Chr(716), 1, -1, False)
step_108 = Replace (step_107, Chr(34), Chr(712), 1, -1, False)
step_109 = Replace (step_108, "Q", Chr(594), 1, -1, False)
step_110 = Replace (step_109, "A", Chr(593), 1, -1, False)
step_111 = Replace (step_110, "O", Chr(596), 1, -1, False)
step_112 = Replace (step_111, "V", Chr(652), 1, -1, False)
step_113 = Replace (step_112, "7", Chr(612), 1, -1, False)
step_114 = Replace (step_113, "U", Chr(650), 1, -1, False)
step_115 = Replace (step_114, "M", Chr(623), 1, -1, False)
step_116 = Replace (step_115, "6", Chr(592), 1, -1, False)
step_117 = Replace (step_116, "3", Chr(604), 1, -1, False)
step_118 = Replace (step_117, "@", Chr(601), 1, -1, False)
step_119 = Replace (step_118, "8", Chr(629), 1, -1, False)
step_120 = Replace (step_119, "1", Chr(616), 1, -1, False)
step_121 = Replace (step_120, "&", Chr(630), 1, -1, False)
step_122 = Replace (step_121, "{", Chr(230), 1, -1, False)
step_123 = Replace (step_122, "9", Chr(339), 1, -1, False)
step_124 = Replace (step_123, "E", Chr(603), 1, -1, False)
step_125 = Replace (step_124, "2", Chr(248), 1, -1, False)
step_126 = Replace (step_125, "Y", Chr(655), 1, -1, False)
step_127 = Replace (step_126, "I", Chr(618), 1, -1, False)
step_128 = Replace (step_127, "L", Chr(654), 1, -1, False)
step_129 = Replace (step_128, "P", Chr(651), 1, -1, False)
step_130 = Replace (step_129, "K", Chr(620), 1, -1, False)
step_131 = Replace (step_130, "R", Chr(641), 1, -1, False)
step_132 = Replace (step_131, "X", Chr(967), 1, -1, False)
step_133 = Replace (step_132, "G", Chr(611), 1, -1, False)
step_134 = Replace (step_133, "C", Chr(231), 1, -1, False)
step_135 = Replace (step_134, "Z", Chr(658), 1, -1, False)
step_136 = Replace (step_135, "S", Chr(643), 1, -1, False)
step_137 = Replace (step_136, "D", Chr(240), 1, -1, False)
step_138 = Replace (step_137, "T", Chr(952), 1, -1, False)
step_139 = Replace (step_138, "B", Chr(946), 1, -1, False)
step_140 = Replace (step_139, "4", Chr(639), 1, -1, False)
step_141 = Replace (step_140, "N", Chr(331), 1, -1, False)
step_142 = Replace (step_141, "J", Chr(626), 1, -1, False)
step_143 = Replace (step_142, "F", Chr(625), 1, -1, False)
step_144 = Replace (step_143, "?", Chr(660), 1, -1, False)
step_145 = Replace (step_144, "g", Chr(609), 1, -1, False)

